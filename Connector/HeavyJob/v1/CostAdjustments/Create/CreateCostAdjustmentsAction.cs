namespace Connector.HeavyJob.v1.CostAdjustments.Create;

using Json.Schema.Generation;
using System;
using System.Text.Json.Serialization;
using Xchange.Connector.SDK.Action;

/// <summary>
/// Action object that will represent an action in the Xchange system. This will contain an input object type,
/// an output object type, and a Action failure type (this will default to <see cref="StandardActionFailure"/>
/// but that can be overridden with your own preferred type). These objects will be converted to a JsonSchema, 
/// so add attributes to the properties to provide any descriptions, titles, ranges, max, min, etc... 
/// These types will be used for validation at runtime to make sure the objects being passed through the system 
/// are properly formed. The schema also helps provide integrators more information for what the values 
/// are intended to be.
/// </summary>
[Description("Creates a new cost adjustment")]
public class CreateCostAdjustmentsAction : IStandardAction<CreateCostAdjustmentsActionInput, CreateCostAdjustmentsActionOutput>
{
    public CreateCostAdjustmentsActionInput ActionInput { get; set; } = new()
    {
        BusinessUnitId = Guid.Empty,
        Code = string.Empty,
        Type = CostAdjustmentType.Undefined
    };

    public CreateCostAdjustmentsActionOutput ActionOutput { get; set; } = new()
    {
        Id = Guid.Empty,
        BusinessUnitId = Guid.Empty,
        Code = string.Empty,
        Type = CostAdjustmentType.Undefined
    };

    public StandardActionFailure ActionFailure { get; set; } = new();

    public bool CreateRtap => true;
}

public class CreateCostAdjustmentsActionInput
{
    [JsonPropertyName("businessUnitId")]
    [Description("The business unit id")]
    [Required]
    public required Guid BusinessUnitId { get; init; }

    [JsonPropertyName("code")]
    [Description("The cost adjustment code")]
    [Required]
    public required string Code { get; init; }

    [JsonPropertyName("description")]
    [Description("The cost adjustment description")]
    public string? Description { get; init; }

    [JsonPropertyName("applyCost")]
    [Description("whether cost values (based on rates and/or entry) are generated by that cost adjustment entity")]
    public bool? ApplyCost { get; init; }

    [JsonPropertyName("applyToAllHours")]
    [Description("Whether to apply cost against attendance hours in addition to working hours")]
    public bool? ApplyToAllHours { get; init; }

    [JsonPropertyName("isTaxable")]
    [Description("Whether the cost adjustment is taxable")]
    public bool? IsTaxable { get; init; }

    [JsonPropertyName("isActive")]
    [Description("Whether the cost adjustment is active")]
    public bool? IsActive { get; init; }

    [JsonPropertyName("type")]
    [Description("The type of cost adjustment")]
    [Required]
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public CostAdjustmentType Type { get; init; }

    [JsonPropertyName("accountingCode")]
    [Description("The accounting code")]
    public string? AccountingCode { get; init; }
}

public class CreateCostAdjustmentsActionOutput
{
    [JsonPropertyName("id")]
    [Description("The cost adjustment id")]
    public required Guid Id { get; init; }

    [JsonPropertyName("businessUnitId")]
    [Description("The business unit id")]
    public required Guid BusinessUnitId { get; init; }

    [JsonPropertyName("code")]
    [Description("The cost adjustment code")]
    public required string Code { get; init; }

    [JsonPropertyName("description")]
    [Description("The cost adjustment description")]
    public string? Description { get; init; }

    [JsonPropertyName("applyCost")]
    [Description("whether cost values (based on rates and/or entry) are generated by that cost adjustment entity")]
    public bool? ApplyCost { get; init; }

    [JsonPropertyName("applyToAllHours")]
    [Description("Whether to apply cost against attendance hours in addition to working hours")]
    public bool? ApplyToAllHours { get; init; }

    [JsonPropertyName("isTaxable")]
    [Description("Whether the cost adjustment is taxable")]
    public bool? IsTaxable { get; init; }

    [JsonPropertyName("isActive")]
    [Description("Whether the cost adjustment is active")]
    public bool? IsActive { get; init; }

    [JsonPropertyName("type")]
    [Description("The type of cost adjustment")]
    public required CostAdjustmentType Type { get; init; }

    [JsonPropertyName("accountingCode")]
    [Description("The accounting code")]
    public string? AccountingCode { get; init; }
}
