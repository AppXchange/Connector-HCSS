namespace Connector.HeavyJob.v1.CostAdjustments.Update;

using Json.Schema.Generation;
using System;
using System.Text.Json.Serialization;
using Xchange.Connector.SDK.Action;

/// <summary>
/// Action object that will represent an action in the Xchange system. This will contain an input object type,
/// an output object type, and a Action failure type (this will default to <see cref="StandardActionFailure"/>
/// but that can be overridden with your own preferred type). These objects will be converted to a JsonSchema, 
/// so add attributes to the properties to provide any descriptions, titles, ranges, max, min, etc... 
/// These types will be used for validation at runtime to make sure the objects being passed through the system 
/// are properly formed. The schema also helps provide integrators more information for what the values 
/// are intended to be.
/// </summary>
[Description("Updates an existing cost adjustment by its ID")]
public class UpdateCostAdjustmentsAction : IStandardAction<UpdateCostAdjustmentsActionInput, UpdateCostAdjustmentsActionOutput>
{
    public UpdateCostAdjustmentsActionInput ActionInput { get; set; } = new();
    public UpdateCostAdjustmentsActionOutput ActionOutput { get; set; } = new();
    public StandardActionFailure ActionFailure { get; set; } = new();

    public bool CreateRtap => true;
}

public class UpdateCostAdjustmentsActionInput
{
    [JsonPropertyName("id")]
    [Required]
    [Description("The ID of the existing cost adjustment")]
    public Guid Id { get; set; }

    [JsonPropertyName("code")]
    [Required]
    [Description("The cost adjustment code")]
    public string Code { get; set; } = string.Empty;

    [JsonPropertyName("description")]
    [Description("The cost adjustment description")]
    public string? Description { get; set; }

    [JsonPropertyName("applyCost")]
    [Description("Whether cost values are generated by that cost adjustment entity")]
    public bool? ApplyCost { get; set; }

    [JsonPropertyName("applyToAllHours")]
    [Description("Whether to apply cost against attendance hours in addition to working hours")]
    public bool? ApplyToAllHours { get; set; }

    [JsonPropertyName("isTaxable")]
    [Description("Whether the cost adjustment is taxable")]
    public bool? IsTaxable { get; set; }

    [JsonPropertyName("isActive")]
    [Description("Whether the cost adjustment is active")]
    public bool? IsActive { get; set; }

    [JsonPropertyName("type")]
    [Required]
    [Description("The type of cost adjustment")]
    public string Type { get; set; } = string.Empty;

    [JsonPropertyName("accountingCode")]
    [Description("The accounting code")]
    public string? AccountingCode { get; set; }
}

public class UpdateCostAdjustmentsActionOutput
{
    [JsonPropertyName("id")]
    [Description("The ID of the updated cost adjustment")]
    public Guid Id { get; set; }
}
